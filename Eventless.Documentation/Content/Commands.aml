<?xml version="1.0" encoding="utf-8"?>
<topic id="10996c9c-5feb-4b17-b006-6b109d4b6228" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        Commands are a pre-existing XAML concept, and act as the binding target
      for a clickable button in the UI.
      </para>
      <para>
        They include a <codeInline>bool</codeInline> observable that controls
        whether the button should be enabled. This is made explicit in Eventless.
      </para>
    </introduction>

    <procedure>
      <title>Enabling a Command</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Declare a mutable string that the user will be able to edit.</para>
            <code>
              public IMutable&lt;string&gt; NewNoteText { get; } = Mutable.From(string.Empty);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Declare a command that the <codeInline>Add note</codeInline> button will
            bind to.</para>
            <code>              
              public ICommand AddNote { get; }
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>
              In the model's constructor, set up the command. The command will only be
              allowed to execute when the user has entered some text.
            </para>
            <code>
              AddNote = new Command(
                execute: () =&gt;
                {
                    var text = NewNoteText.Value;
                    NewNoteText.Value = string.Empty;
                    AllNotes.Value.Add(new Note {Text = {Value = text}});
                }, 
                canExecute: Computed.From(() =&gt; NewNoteText.Value.Length != 0));
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>
              Bind to the command from a button in the XAML. This is no different to how
              it would be done without Eventless.
            </para>
            <code>
              &lt;Button Command="{Binding AddNote}" IsDefault="True" &gt;Add&lt;/Button&gt;
            </code>
          </content>
        </step>
      </steps>      
    </procedure>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
